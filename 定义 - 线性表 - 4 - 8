#define _CRT_SECURE_NO_WARNINGS 1
#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2
typedef int Status;
typedef char ElemType;

//顺序表特点：1.利用数据元素的存储位置表示线性表中相邻数据元素之间的前后关系，即线性表的逻辑结构与存储结构一致
//            2.在访问线性表时，可以快速地计算出任何一个数据元素的存储地址。因此可以粗略的认为，访问每个元素所花时间相等
//这种存储元素的方法被称为 随机存取法

//查找，插入，删除算法的平均时间复杂度为 O(n)
//显然，顺序表操作算法的空间复杂度为 O(1)   ---   即没有占用辅助空间

//优点：存储密度大（结点本身所占存储量/结点结构所占存储量）
//可以随机存取表中任一元素

//缺点：在插入、删除某一元素时，需要移动大量元素
//浪费存储空间（防止溢出，数组通常设置很大）
//属于静态存储结构，数据元素的个数不能自由扩充

//为了克服缺点，就可以使用 链表

int main()
{

	return 0;
}

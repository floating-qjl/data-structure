#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//由于栈本身就是线性表，于是栈也有顺序存储和链式存储两种实现方式

//顺序栈

//存储方式：同一般线性表的顺序存储结构完全相同，利用一组地址连续连续的存储单元依次存放自栈底到栈顶的数据元素
//          栈底一般在低地址端
//          附设 top 指针，指示栈顶元素在顺序栈中的位置
//          另设 base 指针，指示栈底元素在顺序栈中的位置  栈底元素 a1 下标为 0 
//    但是为了操作方便，通常 top 指示真正的栈顶元素上面一个位置的下标地址
//    另外，用 stacksize 表示栈可使用的最大容量

//    空栈：base == top 是栈空标志
//    栈满：top - base == stacksize

//    栈满时的处理方法：1.报错，返回操作系统
//                      2.分配更大的空间，作为栈的存储空间，将原栈的内容移入新栈

//    使用数组作为顺序栈存储方式的特点：简单、方便、但易产生溢出（数组大小固定）
//    上溢：栈已经满，又要压入元素
//    下溢：栈已经空，还要弹出元素
//    注：上溢是一种错误，使问题的处理无法进行；而下溢一般认为是一种结束条件，即问题处理结束


//顺序栈的表示
#define MAX 100
typedef struct
{
	SElemTYpe* base;//栈底指针
	SElemType* top;//栈顶指针
	int stacksize;//栈可用最大容量
}Sqstack;

//顺序栈的初始化
Status InitStack(SqStack& S)
{  //构造一个空栈
	S.base = new SElemType[MAX];
	//C语言使用动态内存分配 库函数
	if (!S.base)
		exit(OVERFLOW);//存储分配失败
	S.top = S.base;
	S.stacksize = MAX;
	return OK;
}

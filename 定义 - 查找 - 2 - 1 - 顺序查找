//顺序查找（线性查找）

//应用范围：顺序表或线性链表表示的静态查找表
//          表内元素之间无序
//顺序表的表示：
//数据元素类型定义
typedef struct
{
	KeyType key;//关键字域，可以是任意类型
	//其他域
}ElemType;

typedef struct //顺序表结构类型定义
{
	ElemType* R;//表基址
	int length;//表长
}SSTable;
SSTable ST;//定义顺序表

//在顺序表ST中查找值为可以的数据元素（从最后一个元素开始比较）
//存放数据的数组的第 0 号空间是空着的，从 1 号空间开始存储

int Search_Seq(SSTable ST, KeyType Key)//若成功返回其位置信息，否则返回 0
{
	for (int i = ST.length;i >= 1;--i)
		if (ST.R[i].key == key)
			return i;
	return 0;
}

//其他形式
int Search_Seq(SSTable ST, KeyType key)
{
	int i;
	for (i = ST.length;ST.R[i].key != key;--i)
		if (i <= 0)
			break;
	if (i > 0)
		return i;
	else
		return 0;
}

//第二种形式
int Search_Seq(SSTable ST, KeyType key)
{
	int i;
	for (i = ST.length;ST.R[i].key != key && i > 0;--i);
	if (i > 0)
		return i;
	else
		return 0;	
}

//这种方法及其变种 每执行一次循环都要进行两次比较，是否能改进

//改进：把待查关键字key存入表头（“哨兵”、“监视哨”），从后往前逐个比较，可免去查找过程中
//每一步都要检测是否查找完毕，进而加快速度
//改进算法：
int Search_Seq(SSTable ST, KeyType key)
{
	int i;
	ST.R[0].key = key;//增加一个监视哨，哨兵存放于 0 号空间
	for (i = ST.length;ST.R[i].key != key;--i);
	return i;
}
//当ST.length较大时，此改进能使进行一次查找所需平均时间几乎减少一半

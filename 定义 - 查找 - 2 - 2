
int Search_Seq(SSTable ST, KeyType key)
{
	ST.r[0].key = key;
	for (i = ST.length;ST.R[i].key != key;--i);
		return i;
	
}
//比较次数与 key 位置有关
//查找第 i 个元素，需要比较 n - 1 + i
//查找失败，需比较 n + 1 次

//时间复杂度：O(n)
//查找成功时的平均查找长度，设表中各记录查找概率相等：ASL(n) = (1 + 2 + … + n)/n = (n+1)/2
//空间复杂度：一个辅助空间 --- O(1)

//记录的查找概率不相等时如何提高查找效率：
//查找表存储记录原则 --- 按查找概率高低存储：1.查找概率越高，比较次数越少
//                                           2.查找概率越低，比较次数越多

//记录的查找概率无法测定时如何提高查找效率：
//方法 --- 按查找概率动态调整记录顺序：1.在每个记录中设一个访问频度域
//                                     2.始终保持记录按非递增有序的次序排列
//                                     3.每次查找后均将刚查到的记录直接移至表头

//顺序查找的特点
//优点：算法简单，逻辑次序无要求，且不同存储结构均适用
//缺点：ASL太长，时间效率太低

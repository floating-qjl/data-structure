
//散列表的查找

//散列表的基本概念
//思想：记录的存储位置与关键字之间存在对应关系
//      对应关系 --- hash函数
//      Loc(i) = H(keyi)
//查找 key，则访问 H（key）的地址，若查找就成功，查不到就返回一个特殊值，如空指针或空记录
//优点：查找效率高，基本上可以达到 O(1)
//缺点：空间效率低

//散列方法（杂凑法）：选取某个函数，依该函数按关键字计算元素的存储位置，并按此存放；
//                    查找时，由同一个函数对给定值 K 计算地址，将 k 与地址单元中元素
//                    关键码进行对比，确定查找是否成功
//散列函数（杂凑函数）：散列方法中使用的转换函数
//散列表（杂凑表）：按上述思想构造的表
//冲突：不同的关键码映射到同一个散列地址
//同义词：具有相同函数值的多个关键字



//散列函数的构造方法

//在散列查找方法中，冲突是不可能避免的，只能尽可能减少
//使用散列表要解决好两个问题：
//1.构造好的散列函数：(a) 所选函数尽可能简单，以便提高转换速度
//                    (b) 所选函数对关键码计算出的地址，应在散列地址集中致均匀分布，以减少空间浪费
//2.制定一个好的解决冲突的方案：查找时，如果从散列函数计算出的地址中查不到关键码
//                              则应当依据解决冲突的原则，有规律地查询其它相关单元

//构造散列函数考虑的因素：1.执行速度（即计算散列函数所需时间）
//                        2.关键字的长度
//                        3.散列表的大小（大了浪费空间，小了冲突多）
//                        4.关键字的分布情况
//                        5.查找频率

//根据元素集合地特性构造：
//要求一：n 个数据原仅占用 n 个地址，虽然散列查找是以空间换时间，
//        但仍希望散列的地址空间尽量小
//要求二：无论用什么方法存储，目的都是尽量均匀地存放元素，以避免冲突
//方法：直接定址法，数字分析法，平方取中法，折叠法，除留余数法，随机数法

//这里我们使用 直接定址法 和 除留余数法（最常用）

//直接定址法
//Hash(key) = a * key + b（a、b为常数）
//优点：以关键码 key 的某个线性函数值为散列地址，不会产生冲突
//缺点：要占用连续地址空间，空间效率低

//除留余数法
//Hash(key) = key mod p（p 是一个整数）
//关键：如何选取合适的 p 
//技巧：设表长为 m，取 p <= m 且为质数




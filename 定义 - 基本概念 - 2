#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>


//高级语言中的数据类型明显地或隐含地规定了在程序执行期间变量和表达
//的所有可能的取值范围，以及在这些数值范围上所允许进行的操作

//数据类型的作用：约束变量或常量的取值范围，约束变量或常量的操作

//数据类型：数据类型是一组性质相同的值的集合以及定义于这个值集合上的一组操作的总称
//数据类型=值的集合+值集合上的一组操作

//抽象数据类型：是指一个数学模型以及定义在此数学模型上的一组操作
//              由用户定义，从问题抽象出 数据模型（逻辑结构）
//              还包括定义在数据模型上的一组 抽象运算（相关操作）

//抽象数据类型的形式定义：抽象数据类型可以用（D,S,P）三元组表示
//                        D是数据对象，S是D上的关系集，P是对D的基本操作集

//一个抽象数据类型的定义格式如下：ADT 抽象数据据类型名{
//                                    数据对象：<数据对象的定义>
//                                    数据关系：<数据关系的定义>
//                                    基本操作：<基本操作的定义>
//                                }ADT 抽象数据类型名
//数据对象、数据关系的定义用伪代码描述
//基本操作的定义格式为：基本操作名（参数表）
//                      初始条件：（初始条件描述）
//                      操作结果：（操作结果描述）

//基本操作定义格式说明： 
//参数表：赋值参数 值为操作提供输入值
//        引用参数 以 & 打头，除可提供输入值外，还将返回操作结果
//初始条件：描述操作执行之前数据结构和参数应满足的条件，若不满足，则操作失败，并返回相应出错信息
//          若初始条件为空，则省略之
//操作结果：说明操作正常完成之后，数据结构的变化状况和应返回的结果


int main()
{

	return 0;
}

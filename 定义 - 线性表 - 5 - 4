#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//去单链表中第 i 个元素的内容
//算法分析：从链表的头指针出发，顺着链域 next 逐个结点往下搜索，直到搜索到第 i 个结点为止，因此，链表不是随机存取结构。
sattus GetElem L(LinkList, int i, ElemType& e)
{
	p = L->next;//初始化
	j = 1;
	while (p && j < i)  //向后扫描，直到 p 指向第 i 个元素或 p 为空
	{
		if (!p || j > i)
			return ERROR;//第 i 个元素不存在
		e = p->data;//取第 i 个元素
		return ok;
	
	}
}



//按值查找    ---    获取地址
//算法分析：1.从第一个结点起，依次和e相比较
//          2.如果找到一个其值与 e 相等的数据元素，则返回其在链表中的位置 或 地址
//          3.如果查遍整个链表都没有找到其值和 e 相等的元素，则返回 0 或 NULL
Lnode* LocateElem_L(LinkList L, Elentype e)
{
	//在线性表 L 中查找值为 e 的数据元素
	//找到，则返回 L 中值为 e 的数据元素的地址，查找失败返回 NULL
	p = L->next;
	while (p && p->data != e)
	{
		p = p->next;
	}
	return p;
}

//按值查找    ---    获取位置序号
//在线性表 L 中查找值为 e 的数据元素的位置序号
int LocateElem_L(LinkList L, Elemtype e)
{
	//返回 L 中值为 e 的数据元素的位置序号，查找失败返回 0
	p = p->next;
	j = 1;
	while (p && p->data != e)
	{
		p = p->next;
		j++;
	}
	if (p)
		return j;
	else
		return 0;
}


//插入   ---   在第 i 个结点前插入值为 e 的新结点
//算法思路：1.首先找到 a(i-1) 的存储位置 p
//          2.生成一个数据域为 e 的新结点 s
//          3.插入新结点，新结点的指针域指向结点ai
//            结点 a(i-1) 的指针域指向新结点
status ListInsert_L(LinkList& L, int i, ElemType e)
{
	p = L;
	j = 0;
	while (p && j < i - 1)
	{
		p = p->next;
		++j;//寻找第 i-1 个结点，p指向 i-1 结点
	}
	if (!p || j > i - 1)
		return ERROR;//插入非法
	s = new LNode;
	s->data = e;//生成新结点 s，将结点 s 的数据域置为e
	s->next = p->next;//将结点 s 插入L中
	p->next = s;
	return OK;
}

//删除   ---   删除第 i 个结点
//算法思路：1.首先找到 a(i-1) 的存储位置 p ，保存要删除的 ai 的值
//          2.令 p->next 指向 a(i+1)
//          3.释放结点 ai 的空间
status ListDelete_L(LinkList& L, int i, ElemType& e)
{
	p = L;
	j = 0;
	while (p->next && j < i - 1)
	{
		p = p->next;
		++j;//寻找第 i 个结点，并令 p 指向其前驱
	}
	if (!(p->next) || j > i - 1)
		return ERROR;//删除的位置不合理
	q = p->next;//临时保存被删结点的地址以备释放
	p->next = q->next;//改变删除结点前驱结点的指针域 相当于 p->next = p->next->next
	e = q->data;//保存删除结点的数据域
	delete q;//释放删除结点的空间
	return OK;
}
int main()
{

	return 0;
}

//邻接矩阵的存储表示
//用两个数组分别存储 顶点表 和 邻接矩阵
#define MVN 100         //最大顶点数
#define MAX 32767    //表示极大值，即为 无穷大
typedef char VerTexType;//设顶点的数据类型为字符型
typedef int ArcType;//假设边的权值类型为整型

typedef struct
{
	VerTexType vexs[MVN];//顶点表
	ArcType arcs[MVN][MVN];//邻接矩阵
	int vexnum, arcnum;//图的当前点数和边数
}AMGraph;

//采用邻接矩阵表示法创建 无向网
//算法思想：1.输入总顶点数和总边数
//          2.依次输入点的信息存入顶点表中
//          3.初始化邻接矩阵，使每个权值初始化为极大值
//          4.构造邻接矩阵
int LocateVex(AMGraph G, VertaxType u)//图G中查找顶点u，存在则返回顶点表中的下标，否则返回-1
{
	int i;
	for (i = 0;i < G.vexnum;i++)
	{
		if (u == G.vexs[i])
			return i;
	}
	return -1;
}
Status CreateUDN(AMGraph& G)
{
	cin >> G.vexnum >> G.arcnum;//输入总顶点数，总边数
	for (int i = 0;i < G.vexnum;i++)
		cin >> G.vexs[i];//依次输入点信息
	for (i = 0;i < G.vexnum;i++)//初始化邻接矩阵
		for (j = 0;j < G.vexnum;i++)
			G.arcs[i][j] = MAX;//边的权值均置为最大值
	for (k = 0;k < arcnum;k++)//构造邻接矩阵
	{
		cin >> v1 >> v2 >> w;//输入一条边所依附的顶点即边的权值
		i = LocateVex(G, v1);
		j = LocateVex(G, v2);//确定 v1 和 v2 在 G 中的位置（顶点表中的顶点下标）
		G.arcs[i][j] = w;//边 <v1,v2> 的权值置为 w
		G.arcs[j][i] = G.arcs[i][j];//置 <v1,v2> 的对称边 <v2,v1> 的权值为 w
	}
	return OK;
}


//构造无向图
//在无向网的基础上，去除权值
//初始化邻接矩阵时，w均为 0
//构造邻接矩阵时，有路径 w 为 1，否则为 0

//构造有向网
//在无向网的基础上，邻接矩阵是非对称矩阵
//仅为 G.arcs[i][j] 赋值
//无需为 G.arcs[j][i] 赋值

//构造有向图
//在无向网的基础上，同时更改 无向图 和 有向网 的操作


//邻接矩阵存储 图 的优缺点
//优点：直观、简单、好理解
//      方便检查任意一对顶点之间是否存在边
//      方便找任意顶点的所有‘邻接点’（有边直接相连的顶点）
//      方便计算任一顶点的度（从该点发出的边数为“出度”，指向该点的边数为“入度”）
//缺点：不便于增加和删除顶点
//      浪费空间 --- 存稀疏图（点很多而边很少）有大量无效元素
//                   对稠密图（特别是完全图）还是很合算的
//      浪费时间 --- 统计稀疏图中一共有多少条边

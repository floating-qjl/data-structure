#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//链表时间效率比较

//带头结点                   查找首元结点             查找尾结点              查找结点 *p 的前驱结点
//单链表                         O(1)                   O(n)                          无法找到
//设头指针的循环单链表           O(1)                   O(n)                            O(n)
//设尾指针的循环单链表           O(1)                   O(1)                            O(n)
//双向循环链表                   O(1)                   O(1)                            O(1)


//顺序表和链表的比较
//链式存储结构的优点：1.结点空间可以 动态申请和释放
//                    2.数据元素的逻辑次序靠结点的指针来指示，插入和删除时不需要移动数据元素

//链式存储结构的缺点：1.存储密度小，每个结点的指针域需要额外占用存储空间，当每个结点的数据域所占字节不多时，
//                      指针域所占存储空间的比重比较大
//存储密度 是指 结点数据本身所占的存储量和整个结点结构中所占的存储量之比，即（结点数据本身所占空间）/（结点总空间）
//一般的，存储密度越大，存储空间的利用率越高，显然，顺序表的存储密度为 %100，而链表的存储密度小于 %100
//                    2.链式存储结构时非随机存取结构，对任意结点的操作都要从头指针依指针链查找到该结点
//                    这增加了算法的复杂度


//存储空间：顺序表是预先分配的，会造成溢出或闲置       链表为动态分配，不会溢出
//存储密度：      存储密度为 1                             存储密度小于 1
//存取元素：      随机存取，时间复杂度为 O(1)              顺序存取，时间复杂度为 O(n)
//插入、删除：    平均移动约表中一般的元素 为O(n)          不需移动元素，为 O(1)
//适用情况：    1.表长变化不大，且能事先确定变化的范围     1.长度变化较大
//              2.很少进行插入或删除操作，经常访问数据元素 2.频繁进行插入或删除操作

int main()
{

	return 0;
}

//队列                                                            5 j6
//front = rear = 0                                                4 j5
//入队：base[rear] = x; rear++;                                   3 j4
//出队：x = base[front];frpnt++;                                  2 j3
//空队标志：front == tear                                         1 j2
//                                                      rear->    0 j1   <-front
//若 front = 0，rear = max;则再入队 - 真溢出
//若 front !=0，rear = max;则再入队 - 假溢出

//解决假上溢的方法：1.将队中元素依次向队头方向移动
//                    缺点：浪费时间，每移动一次，队中元素都要移动
//                  2.将队空间设想成一个循环的表，即分配给队列的 m 个存储元素可以循环使用，若向量的开始端空着，又可从头
//                    使用空着的空间，当 front 为 max 时，也是一样的

//引出循环队列
//base[0]接在base[max-1]之后，若 rear+1 == M，则令rear = 0
//实现方法：使用求模运算
//插入元素：Q.base[Q.rear] = x
//          Q.rear = (Q.rear + 1) % max
//删除元素：x = Q.base[s.front]
//          Q..front = (Q.front + 1) % max

//此时，队空和队满都为 front==rear
//解决方案：1.另设一个标志以区别队空和队满
//          2.另设一个变量，记录元素个数
//          3.少用一个元素空间

//循环队列解决队满时判断方法 --- 少用一个元素空间
//            | |                     | |
//            | |                     | |<-Q.front
//            | |                     | |
//            | |                     | |
//            | |                     | |
// Q.front->  | |  <-Q.rear   Q.rear->| |
//            空队               一般情况

//队空：front == rear

//         |j6|        Q.rear->|  |
//Q.front->|j5|                |J5|
//Q.rear-> |  |                |J4|
//         |j9|                |j3|
//         |j8|                |j2|
//         |j7|       Q.front->|j1|

//队满：队尾指针再加1，就与队头指针重合
//即 (rear + 1) % max == front

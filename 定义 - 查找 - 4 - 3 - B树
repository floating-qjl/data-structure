
//在最坏的情况下，所查找的数据在二叉搜索树的最后的叶子结点上
//此时，搜索到这个数据的步骤即为 树的高度，而磁盘读写的次数也是 树的高度
//对于磁盘来说，内存在一定时间内是有存储上限的，因此如果数据过大
//很有可能会大大增加运行时间，显得效率低下

//此时，就需要使用一个效率高的数据结构，即为 B树
//例如：                       9
//                           /   \
//                          /     \
//                        2,6      12
//                      /  |  \   /  \
//                     1  3,5  8 11  13,15
//这样的话，虽然 B树 和二叉搜索树搜查的判断次数是一致的，但是大大缩减了 树的高度
//也就意味着提高了 磁盘读写速度，查找效率增加

//B树的建立规则：1.根结点至少有两个子结点
//               2.每个中间结点都包含 k-1 个元素和 k 个孩子，其中 m/2 <= k <= m
//                 m 为 B树 的层数，k 为当前结点的元素个数 + 1
//               3.每一个叶子结点都包含 k-1 个元素，其中 m/2 <= k <= m
//               4.所有叶子结点都位于同一层
//               5.每个结点中的元素从小到大排列

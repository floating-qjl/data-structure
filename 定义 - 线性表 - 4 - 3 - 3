#define _CRT_SECURE_NO_WARNINGS 1

#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2
typedef int Status;
typedef char ElemType;

//顺序表的插入
//算法思想：判断插入位置 i 是否合法
//判断顺序表的存储空间是否已满，若已满返回ERROR
//将第 n 至第 i 位的元素一次向后移动一个位置，空出第 i 个位置
//将要插入的新元素 e 放入第 i 个位置
//表长加1，插入成功返回OK

Status ListInsert_Sq(SqList& L, int i, ElemType e)
{
	if (i<1 || i>L.length + 1)
		return ERROR;//i 值不合法
	if (L.length == MAXSIZE)
		return ERROR;//当前存储空间已满
	for (j = L.length - 1;j >= i - 1;j--)
	{
		L.elem[j + 1] = L, elem[j];//插入位置及之后的元素后移
	}
	L.elem[i - 1] = e;//将新元素 e 放入第 i 个位置
	L.length++;//表长加1
	return OK;
}

//算法时间主要耗费在移动元素的操作上
//若插入在尾结点之后，则根本无需移动（特别快）
//若插入在首结点之前，则表中元素全部后移（特别慢）
//若要考虑在各种位置插入的平均移动次数（一共 n+1 种可能）：
//(1/(n+1))  *   (n + n-1 +…… + 1 + 0) = n/2         -----        平均时间复杂度O(n)


int main()
{

	return 0;
}

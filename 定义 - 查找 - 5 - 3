
//散列表的查找

//查找过程：给定 k 值 -> 计算 H(k) -> 此地址为空 -> 关键字==k -> 地址冲突，按处理冲突方法计算Hi 
//                                     查找失败      查找成功  
//用线性探测法处理冲突：平均查找长度ASL = 各个元素查找存入的次数之和 / 元素个数
//用链地址法处理冲突：平均查找长度ASL = 各个元素查找的次数 / 元素个数

//用无序表查找ASL = （m+1）/2
//用有序表折半查找ASL = log2(n+1) - 1
//用散列表查找ASL：取决于 散列函数 解决冲突的方法 散列表的装填因子a
//                 a = 表中填入的记录数 / 哈希表的长度
//                 a 越大，表中记录数越多，说明表装的越满，发生冲突的可能性就越大
//                 查找时2比较次数就越多
//ASL与装填因子有关，既不是严格的 O(1)，也不是 O(n)
//ASL = 1 + a/2（拉链法）
//ASL = 1/2 *(1 + 1/(1-a))（线性探测法）
//ASL = -1/a * ln(1-a)（随即探测法）

//结论：散列表技术具有很好的平均性能，优于一些传统的技术
//      链地址法优于开地址法
//      除留余数法作散列函数由于其他类型函数


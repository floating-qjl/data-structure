#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//哈夫曼树构造算法的实现
//采用顺序存储结构---一维结构数组
//结点类型定义
typedef struct
{
	int weight;
	int parent, lch, rch;
}HTNode,*HuffmanTree;
//哈夫曼树共有 2n-1 个结点不使用 0 下标，数组大小为 2n
//构造过程：存储权重，并将双亲、孩子值设为 0
//          生成新结点，权重为旧结点之和，赋值孩子值，两个旧结点双亲值改变为新结点下标（不再使用这两个结点）
//          重复步骤，直到只剩下一个结点的双亲值为 0

//算法实现：1.初始化结点，左孩子、右孩子、双亲值为 0
//          2.输入初始 n 个叶子结点，更改结点的权重值
//          3.进行以下 n-1 次合并，依次产生 n-1 个结点
//            在结点中选两个未被选过的weight最小的两个结点
//            修改两个结点的parent值
//            修改新产生的结点中的各项值
void CreatHuffmanTree(HuffmanTree HT, int n) //构造哈夫曼树---哈夫曼算法
{
	if (n <= 1)
		return;
	int m = 2 * n - 1;//数组共 2n-1 个元素
	HT = new HTNode[m + 1];//0 号单元未用
	for (i = 1;i <= m;++i)//将 2n-1 个元素的lch、rch、parent置为0
	{
		HT[i].lch = 0;
		HT[i].rch = 0;
		HT[i].parent = 0;
	}
	for (i = 1;i <= n;++i) cin >> HT[i].weight;//输入前 n 个元素的weight值
	//初始化结束，下面开始建立哈夫曼树
	for (i = n + 1;i <= m;i++) //合并产生 n-1 个结点---构造哈夫曼树
	{
		Select(HT, i - 1, s1, s2);//自定义函数，选择两个其双亲域为0，且权值最小的结点，
		                          //并返回他们在HT中的下标s1和s2
		HT[s1].parent = i;
		HT[s2].parent = i;//表示从 F 中删除 s1，s2
		HT[i].lch = s1;
		HT[i].rch = s2;//s1，s2分别作为i的左右孩子
		HT[i].weight = HT[s1].weight + HT[s2].weight;//i 的权重为左右孩子权值之和
	}
}

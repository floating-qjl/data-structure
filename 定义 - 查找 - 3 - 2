//二叉排序树的操作 --- 插入
//若二叉排序树为空，则插入结点作为根结点插入到空树中
//否则，继续在其左、右子树上查找
//      树中已有，不再插入
//      树中没有，查找直至某个叶子结点的左子树或右子树为空为止，则插入结点
//                应为该叶子结点的左孩子或右孩子
//插入的元素一定在叶结点上


//二叉排序树的操作 --- 生成
//从空树出发，经过一系列的查找。插入操作之后，可生成一棵二叉排序树
//一个无序序列可通过构造二叉排序树而变成一个有序序列，构造树的过程就是对无序序列进行排序的过程
//插入的结点均为叶子节点，故无需移动其他结点，相当于在有序序列上插入记录而无需移动其他记录
//但是：关键字的输入顺序不同，建立的二叉排序树不同

//二叉排序树的操作 --- 删除
//从二叉排序树删除一个结点，不能把以该结点为根的子树都删去，只能删除该结点
//并且还应保证删除后所得到的二叉树仍然满足二叉排序树的性质不变
//由于中序遍历二叉排序树可以得到一个递增有序的序列。那么，在二叉排序树中
//删去一个结点相当于删去有序序列中的一个结点
//将因删除结点而断开的的二叉链表重新链接起来，防止重新链接后树的高度增加

//1.被删除的结点是叶子结点：直接删去该结点，其双亲结点中相应指针域的值改为“空”
//2.被删除的结点只有左子树或者只有右子树，用其左子树或者右子树替换它（结点替换）
//  其双亲结点的相应指针域的值改为“指向被删除结点的左子树或右子树”
//3.被删除的结点既有左子树，也有右子树：
//  以其中序前趋值替换之（值替换），然后再删除该前趋结点，前趋是左子树中最大的结点
//  也可以用其后继替换之，然后再删除该后继结点，后继是右子树中最小的结点

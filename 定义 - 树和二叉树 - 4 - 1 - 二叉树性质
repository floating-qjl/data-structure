#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>

//二叉树的抽象数据类型
//数据对象D：D是具有相同特性的数据元素的集合
//数据关系R：若 D 为空，则 R 为空
//           若 D 不为空，则 R={ H }；H 是如下关系：
//           root 唯一（关于根的说明）
//           D(j)交集 D(k)为 空（关于子树不相交的说明）

//操作：CreateBitree(&T,definition)    
//      初始条件：definition给出二叉树T的定义
//      操作结果：按definiyion构造二叉树T
//      PreOrder Traverse(T)
//      初始条件：二叉树 T 存在
//      操作结果：先序遍历T，对每个结点访问一次
//      InOrder Traverse(T)
//      初始条件：二叉树 T 存在
//      操作结果：中序遍历T，对每个结点访问一次
//      PostOrder Traverse(T)
//      初始条件：二叉树 T 存在
//      操作结果：后序遍历T，对每个结点访问一次




//二叉树的性质和存储结构

//性质1：在二叉树的第 i 层上至多有 2^(i-1) 个结点
//证明 ：只有一个根结点，第一层有 1 个结点，而每一个结点最多有两个后继结点（每个结点的度最大为 2 ）
//       第 i 层上至少有 1 个结点
//性质2：深度为 k 的二叉树至多有 2^k - 1 个结点（k>=1）
//       深度为 k 的二叉树至少有 k 个结点
//性质3：对任何一棵二叉树 T，如果其叶子数为 n0，度为 2 的结点数为 n2，则 n0 = n2 + 1
//总边数（结点的分叉数） B = 结点n - 1 = n2(度为2的结点) * 2 + n1(度为1的结点) * 1
//                       n = n2*2 + n1*1 + 1    且 n = n2 + n1 + n0(度为0的结点)
//                     即n0 = n2 + 1 

#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//栈

//是一个后进先出的线性表结构，先限定在一端（通常是表尾）进行插入和删除操作的线性表
//表尾称为栈顶，表头称为栈底
//例如： 栈 s = (a1,a2,a3,……,a(n-1),an)
//此时，a1 称为栈底元素，a2 称为栈顶元素
//插入元素到栈顶的操作，称为 入栈（压栈）
//从栈顶删除最后一个元素的操作，称为 出栈（弹栈）

//三个元素 a，b，c，入栈顺序为a，b，c，问 出栈顺序有几种可能
//1.a入栈，b入栈，c入栈，c出栈，b出栈，a出栈   ---   c b a
//2.a入栈，a出栈，b入栈，b出栈，c入栈，c出栈   ---   a b c
//3.a入栈，a出栈，b入栈，c入栈，c出栈，b出栈   ---   a c b
//4.a入栈，b入栈，b出栈，a出栈，c入栈，c出栈   ---   b a c
//5.a入栈，b入栈，b出栈，c入栈，c出栈，a出栈   ---   b c a

//那么出栈顺序可能为 cab 的情况吗
//答：不可能

//逻辑结构：与线性表相同，仍为一对一关系
//存储结构：用顺序栈或链栈存储均可，但以顺序栈更常见
//运算规则：只能在栈顶运算，且访问结点时依照后进先出（LIFO）的原则
//实现方式：关键试编写入栈和出栈函数，具体实现依顺序栈或链栈的不同而不同

//栈与一般线性表的区别：仅在于运算规则不同（随机存取 -> 后进先出）


//队列
//是一种先进先出的线性表，在表一端插入（表尾），在另一端（表头）删除
//Q = (a1,a2,……,an)
// a1  a2  a3 …… an <- 入队列
//队头            队尾

//逻辑结构：与线性表相同，仍未一对一关系
//存储结构：顺序队或链队，以循环顺序队列更常见
//运算规则：只能在队首和队尾运算，且访问结点时
//实现方式：掌握入队和出队操作，具体实现依顺序队或链队的不同而不同

int main()
{
	return 0;
}

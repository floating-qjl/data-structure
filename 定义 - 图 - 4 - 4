
//最短路径的抽象问题

//典型用途：交通网络的问题 --- 从甲地到乙地之间是否有最短路径
//交通网络用有向网来表示：
//顶点       --- 表示地点
//弧         --- 表示两个地点有路连通
//弧上的权值 --- 表示两地点之间的距离，交通费或途中所花费的时间等
//如何能够使一个地点到另一个地点的运输距离最短或运费最省，这就是一个求两个地点间的最短路径问题

//问题抽象：在有向网中 A 点（源点）到达 B 点（终点）的多条路径中，寻找一条各边权值之和最小
//          的路径，即最短路径
//          最短路径与最小生成树不同，路径上不一定包含 n 个顶点，也不一定包含 n-1 条边

//第一类问题：两点间最短路经
//第二类问题：某源点到其他各点最短路径

//单源最短路径 --- 用 迪杰斯特拉 算法
//所有顶点间的最短路径 --- 用 弗洛伊德 算法



//迪杰斯特拉 算法
//算法思想：1.初始化：先找出从源点 V0 到各终点 Vk 的直达路径（V0，Vk），即通过一条弧到达的路径
//          2.选择  ：从这些路径中找出一条长度最短的路径（v0，u）
//          3.更新  ：然后对其余各条路径进行适当调整
//                    若在图中存在弧（u，vk），且（v0，u）+（u，vk）<（v0，vk）（u相当于是个中继站）
//                    则以路径（v0，u，vk）代替（v0.vk）
//                    再调整后的各条路径中，再找长度最短的路径，以此类推

//总结：按路径长度递增次序产生最短路径
//      1.把 V 分成两组：(1) S：已求出最短路径的顶点的集合
//                       (2) T = V - S：尚未确定最短路径的顶点集合
//      2.将 T 中顶点按最短路径递增的次序加入到 S 中，保证：
//         (1)从源点 v0 到 S 中各顶点的最短路径长度都小于等于从 v0 到 T 中任何顶点的最短路径长度
//         (2)每个顶点对应一个距离值：S 中顶点：从 v0 到此顶点的最短路径长度
//                                    T 中顶点：从 v0 到此顶点的只包括 S 中顶点作中间顶点的最短路径长度
//注意：顶点之间若无直接路径，则两顶点的路径长为 无穷大；初始顶点为 S 中初始化的顶点
//      寻找 初始顶点 到 各个顶点 之间距离的最小值，将对应顶点计入 S
//      然后再次从 初始顶点 开始，计算到各个顶点之间的距离，不过这次要算上 另一个顶点
//      （这样的话，部分原先没有路径的的顶点或许也可以相通，且这 另一个顶点 与初始顶点 的最短路径固定，因为没有其他更好的路径了）
//      若 S 中的部分顶点相连 然后与目标顶点之间的距离 小于 初始顶点直接到目标顶点之间的距离
//      则要更换创建的存储 路径长数组 中的值，否则不变
//      然后重复上述操作，直到 初始顶点 到其余所有顶点 的最短路径被找到





//所有顶点的最短路径
//方法一：每次以一个顶点为源点，重复执行 迪杰斯特拉 算法 n 此
//        时间复杂度：O(n^3)
//方法二：弗洛伊德算法
//时间复杂度：O(n^3)


//弗洛伊德算法
//算法思想：逐个顶点试探，从 vi 到 vj 的所有可能存在的路径中，选出一条长度最短的路径
//步骤：1.初始时设置一个 n 阶方阵，令其对角线元素为0，若存在弧<vi，vj>，
//        则对应元素为权值，否则为 无穷大
//注意：对角线仅为从左上角到右下角的一条（即为 顶点 到 自己 的权值）

//      2.逐步试着在原直接路径中增加中间顶点，若加入中间顶点后路径变短，则修改之
//        否则，维持原值，所有顶点试探完毕，算法结束


 
//排序：将一组杂乱无章的数据按一定规律顺次排列起来
//      即，将无序序列排成一个有序序列（由小到大或由大到小）的运算
//      如果参加排序的数据结点包含多个数据域，那么排序往往是针对其中某个域而言

//分类：1.按存储介质分类
//        内部排序：数据量不大，数据在内存，无需内外存 交换数据
//        外部排序：数据量不大，数据在外存（文件排序）
//                  外部排序时，要将数据分批调入内存来排序，中间结果还要及时放入外存
//                  显然外部排序要复杂的多

//      2.按比较器个数分类
//        串行排序：单处理机（同一时刻比较一对元素）
//        并行排序：多处理机（同一时刻比较多对元素）

//      3.按主要操作分类
//        比较排序：用比较的方法
//          例如：插入排序、交换排序、选择排序、归并排序
//        基数排序：不比较元素的大小，仅仅根据元素本身的取值确定其有序位置

//      4.按辅助空间分类
//        原地排序：辅助空间用量为O(1)的排序方式（所占的辅助存储空间与参加排序的数据量大小无关）
//        非原地排序：辅助空间用量超过O(1)的排序方法

//      5.按稳定性分类
//        稳定排序：能够使任何数值相等的元素，排序以后相对次序不变
//        非稳定排序：不是稳定排序的方法（相等的数值不按排序前的顺序排序）
//          排序的稳定性只对结构类型数据排序具有意义
//          排序方式是否稳定，并不能衡量一个排序算法的优劣

//      6.按自然性分类
//        自然排序：输入数据越有序，排序的速度越快的排序方式
//        非自然排序：不是自然排序的方法

//顺序表的存储结构
#define MAX 20 //设记录不超过20个
typedef int KeyType;//设关键字为int

typedef struct   //定义每个记录的结构
{
	KeyType key;//关键字
	InofType otherinof;//其他数据项
}RedType;

typedef struct     //定义顺序表的结构
{
	ReaType r[MAX + 1];//存储顺序表的向量，r[0]一般作哨兵或缓冲区
	int length;//顺序表的长度
}SqList;

#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//双向链表
//在单链表中的每个结点里再增加了一个指向其直接前驱的指针域 prior ，这样链表中就形成了有两个不同方向的链，故称为双向链表
//定义可如下：
typedef struct DuLNode
{
	Elemtype data;
	struct DuLNode* prior;
	struct DuLNode next;

}DuLNode,*DuLinkList;
//空表：两个指针域都为空
//非空表：头结点前驱指针域为空，尾结点后继指针域为空

//双向循环链表
//和单链的循环表类似，双向链表也可以有循环表
//让头结点的前驱指针指向链表的最后一个结点
//让最后一个结点的后继指针指向头结点

//双向链表结构的对称性（设指针 p 指向某一结点）：
//p->prior->next = p = p->next->prior;

//在双向链表中的某些操作（如：求表长），因为仅仅涉及一个方向的指针，故他们的算法与线性链表的相同。但在插入、删除时，则
//需同时修改两个方向上的指针，两者操作的时间复杂度均为 O(n)



int main()
{
	
	return 0;
}

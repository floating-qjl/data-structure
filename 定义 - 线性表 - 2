#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
int main()
{
	//一元多项式的运算
	//Rn(X) = Pn(X) + Qm(X)
	//线性表 R = (p0 + q0,p1 + q1,p2 + q2,……,pm + qm,p(m+1),……pn)

	//稀疏多项式 S(x) = 1 + 3x^10000 + 2x^20000
	//若按照上述线性表的表现方式，则20001项（常数项+未知数的项数（一次幂为一项）），将会造成存储空间很大的浪费

	//稀疏多项式的运算
	//多项式非零项的数组表示：
	//A(x) = 7 + 3x + 9x^8 + 5x^17
	//我们将其所有项的系数和指数储存起来，构成一个新的线性表

	//Pn(x) = p1x^e1 + p2x^e2 + ……+ pmx^em
	//线性表 P = ((p1,e1),(p2,e2),……,(pm,em))

	//稀疏多项式的几何运算
	//设此时线性表 A = ((7,0),(3,1),(9,8),(5,17))
	//此时线性表   B = ((8,1),(22,7),(-9,8))
	//则此时创建一个新数组 c
	//分别从头遍历比较 a 和 b 的每一项
	//指数相同，对应系数相加，若其和不为零，则在c中增加一个新项
	//指数不相同，则将指数较小的项复制到 c 中
	//一个多项式以遍历完毕时，将另一个剩余项依次复制到c中即可
	//此时 A 和 B 的和为 ((7,0),(11,1),(,22,7),(5,17))

	//而此时，c 的空间究竟应该多大并不能确认
	//这也证明了顺序存储结构存在问题：1.存储结构分配不灵活 2.运算的空间复杂度高

	//因此，此时我们可以使用链式存储结构，可以自由的调配空间




	//图书信息管理系统
	//需要的功能：1.查找 2.插入 3.删除 4.修改 5.排序 6.计数
	//图书表抽象为线性表，表中每本图书抽象线性表中数据元素
	//选择适当的存储结构，实现此存储结构上的基本操作，用基本操作实现功能

	//总结：
	//线性表中数据元素的类型可以为简单类型，也可以为复杂类型
	//许多实际应用问题所涉的基本操作有很大相似性，不应为每个具体应用单独编写一个程序
	//从具体应用中抽象出共性的逻辑结构和基本操作（抽象数据类型），然后实现其存储结构和基本操作
	return 0;
}

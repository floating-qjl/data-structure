#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//KMP算法
//该算法较BF算法有较大改进，从而使算法效率有了某种程度的提高
//利用已经部分匹配的结果从而加快模式串的滑动速度，且主串S的指针不必回溯，可以提速到 O(n + m)

//为此，定义next[j]函数，表明当模式中第j个字符与主串中相应字符“失配”时，在模式中需重新和主串中该字符进行比较的字符的位置

//next[j] = 1.max{k|1<k<j,且"p1……p(k-1)" = "p(j-k+1)……p(j-1)"}  当此集合非空时
//                       从头开始的k-1个元素  j前面的k-1个元素
//          2. 0                                                    当 j = 1 时
//          3. 1                                                    其他情况

//设立next数组
//子串：    a , b , c , d , r , f , g
//下标：0 , 1 , 2 , 3 , 4 , 5 , 6 , 7
//下标为0的位置通常存放长度等信息，一般使用时将其空开
//next数组设立本意是为了 让计算机知道当哪个地方的字符不匹配时，指针应该回到前面的哪一个 字符 上
//即为 移动前的指针前面的 子串的最大公共前后缀+1（回到相应的字符）
//而 移动后的指针前面的 子串 = 移动前的指针前面的 子串的最大公共前后缀

//总体来看，KPM算法只需要根据 子串 即可，无需关心主串
//而子串的移动 就是 不匹配时的字符前面的 部分子串的 公共前后缀的 连带移动
//即 假设字串为 a b a b a c d e
//此时                  |当在这里时与主串不匹配（指针在此处）
//前面的部分字串为：a b a b
//真前缀：a ab aba
//真后缀：b ab bab
//此时最长的公共前后缀为 ab
//因此开始移动： a b a b a c d e
//                   |此处为移动后的指针位置
//可以看出 移动后的指针 前面的字符串 长度  ===  最长公共前后缀

int Index_KPM(SString S, SString T, int pos)
{
	i = pos;
	j = 1;
	while (i < S.;ength && j < T.length)
	{
		if (j == 0 || S.ch[i] == T.ch[j])
		{
			i++;
			j++;
		}
		else
			j = next[j];//i不变，j后退
	}
	if (j > T.length)
		return i - T.length;//匹配成功
	else
		return 0;//返回不匹配标志
}
//求next
void get_next(SString T, int& next[])
{
	i = 1;
	next[1] = 0;
	j = 0;
	while (i < T.length)
	{
		if (j == 0 || T.ch[i] == T.ch[j])
		{
			++i;
			++j;
			next[i] = j;
		}
		else
			j = next[j];
	}
}

int main()
{

	return 0;
}

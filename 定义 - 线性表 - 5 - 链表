#define _CRT_SECURE_NO_WARNINGS 1

//线性表的链式存储结构
//结点在存储器中的位置是任意的，即逻辑上相邻的数据元素在物理上不一定相邻
//线性表的链式表示又称为 非顺序映像 或 链式映像

//用一组 物理位置任意的存储单元 来存放线性表的数据元素
//这组存储单元既可以是连续的，也可以是不连续的，甚至是零散分布在内存中的任意位置上
//链表中元素的逻辑次序和物理次序不一定相同

//链表的结点分为 数据域和指针域，数据域存放本身的数据，指针域存放下一个元素的地址（直接后继）
//此处存放的地址，我们称为 指针 或 链
//而第一个元素的地址 称为 头指针

//结点：数据结构的存储映像，由数据域和指针域两部分组成
//链表：n 个结点由 指针链 组成一个链表
//      它是线性表的链式存储映像，称为线性表的链式存储结构

//结点只有一个指针域的链表，称为 单链表 或 线性链表
//结点有两个指针域的链表，称为双链表
//首尾相连的链表称为循环链表

// head --> info ---> a1 ---> a2 ---> ……………… ---> an
//头指针   头结点   首元结点
//头指针：指向链表中第一个结点的指针
//首元结点：是指链表中存储第一个数据元素 a1 的结点
//头结点：在链表的首元结点之前附设的一个结点

//链表的存储结构有两种形式：1.不带头结点
//                            头指针指向第一个元素
//                          2.带头结点
//                            头指针指向头结点

//表示空表：1.无头结点时，头指针为空时表示空表
//          2.有头结点时，当头结点的指针域为空时表示空表
 
//在链表中设置头结点的好处：1.便于处理首元结点：首元结点的地址保存在头结点的指针域中，所以在链表的第一个位置上的
//                                              操作和其他位置一致，无需进行特殊处理
//                          2.便于空表和非空表的统一处理：无论链表是否为空，头指针都是指向头结点的非空指针
//                                                        因此空表和非空表的处理也就统一了

//头结点的数据域中装的是什么：头结点的数据域可以为空，也可存放线性表长度等附加信息，但此结点不能计入链表长度值

//链表的特点：1.结点在存储器上的位置是任意的，即逻辑上相邻的数据元素在物理上不一定相邻
//            2.访问时只能通过头指针进入链表，并通过每个结点的指针域依次向后顺序扫描其余结点，
//              所以寻找第一个结点和最后一个结点所花费的时间不等
//              --- 顺序存取法

//


int main()
{

	return 0;
}

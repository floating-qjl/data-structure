//链队 --- 队列的链式表示和实现

//若用户无法估计所用队列的长度，则宜采用链队列
//链式队列类型定义：
3define max 100 //最大队列长度
typedef struct QNode
{
	QElemType data;
	struct Qnode* next;
}QNode,*QueuePtr;

typedef struct
{
	QueuePtr front;//队头指针
	QueuePtr rear;//队尾指针
}LinkQueue;

//链队列运算指针变化状况
//头指针 和 尾指针都指向 头结点          ---         空队列
//队尾指针指向新加入的元素               ---         入队
//队头指针指向第二个元素，并释放首元素   ---         出队

//链队列的初始化
status InitQueue(LinkQueue& Q)
{
	Q.front = Q.fear = (QueuePtr)malloc(sizeof(QNode));
	if (!Q.front)
		exit(OVEFLOW);
	Q.front->next = NULL;
	return OK;
}

//销毁链队列（补充）
//算法思想：从队头结点开始，依次释放所有结点
status DestroyQueue(LinkQueue& Q)
{
	while (Q.front)
	{
		p = Q.front->next;
		free(Q.front);
		Q.front = p;
		//或者
		Q.rear = Q.front->next;
		free(Q.front);
		Q.front = Q.rear;
	}
	return OK;
}

//将元素e入队
status EnQueue(LinkQueue& Q, QElemType e)
{
	p = (QueuePte)malloc(sizeof(QNode));
	if (!p)
		exit(OVERFLOW);
	p->data = e;
	p->next = NULL;
	Q.rear->next = p;
	Q.rear = p;
	return OK;
}

//链队列出队
status DeQueue(LinkQueue &Q, QElemType &e)
{
	if (Q.fornt == Q.rear)
		return ERROR;
	p = Q.front->next;
	e = p->data;
	Q.front->next = p->next;
	if (Q.rear == p)
		Q.rear = Q.front;//只有一个元素，删除后要把队尾指针改变
	delete p;
	return OK;
}

//求链队列的队头元素
status GetHeaf(LinkQueue Q, QElemType& e)
{
	if (Q.front == Q.rear)
		return ERROR;
	e = Q.front->next->data;
	return OK;
}
